--- fs/ecryptfs/file.c
+++ fs/ecryptfs/file.c
@@ -138,50 +138,29 @@ out:
 	return rc;
 }
 
-struct kmem_cache *ecryptfs_file_info_cache;
+static void ecryptfs_vma_close(struct vm_area_struct *vma)
+{
+	filemap_write_and_wait(vma->vm_file->f_mapping);
+}
+
+static const struct vm_operations_struct ecryptfs_file_vm_ops = {
+	.close		= ecryptfs_vma_close,
+	.fault		= filemap_fault,
+};
 
-static int read_or_initialize_metadata(struct dentry *dentry)
+static int ecryptfs_file_mmap(struct file *file, struct vm_area_struct *vma)
 {
-	struct inode *inode = dentry->d_inode;
-	struct ecryptfs_mount_crypt_stat *mount_crypt_stat;
-	struct ecryptfs_crypt_stat *crypt_stat;
 	int rc;
 
-	crypt_stat = &ecryptfs_inode_to_private(inode)->crypt_stat;
-	mount_crypt_stat = &ecryptfs_superblock_to_private(
-						inode->i_sb)->mount_crypt_stat;
-	mutex_lock(&crypt_stat->cs_mutex);
-
-	if (crypt_stat->flags & ECRYPTFS_POLICY_APPLIED &&
-	    crypt_stat->flags & ECRYPTFS_KEY_VALID) {
-		rc = 0;
-		goto out;
-	}
-
-	rc = ecryptfs_read_metadata(dentry);
+	rc = generic_file_mmap(file, vma);
 	if (!rc)
-		goto out;
+		vma->vm_ops = &ecryptfs_file_vm_ops;
 
-	if (mount_crypt_stat->flags & ECRYPTFS_PLAINTEXT_PASSTHROUGH_ENABLED) {
-		crypt_stat->flags &= ~(ECRYPTFS_I_SIZE_INITIALIZED
-				       | ECRYPTFS_ENCRYPTED);
-		rc = 0;
-		goto out;
-	}
-
-	if (!(mount_crypt_stat->flags & ECRYPTFS_XATTR_METADATA_ENABLED) &&
-	    !i_size_read(ecryptfs_inode_to_lower(inode))) {
-		rc = ecryptfs_initialize_file(dentry, inode);
-		if (!rc)
-			goto out;
-	}
-
-	rc = -EIO;
-out:
-	mutex_unlock(&crypt_stat->cs_mutex);
 	return rc;
 }
 
+struct kmem_cache *ecryptfs_file_info_cache;
+
 /**
  * ecryptfs_open
  * @inode: inode speciying file to open
